@page "/cars"
@using System.Threading
@using System.Timers
@using CarRentalShop.Services
@inject HttpClient _http

<h3>
    <b>Rent Car</b>
</h3>
<br />
<div class="row">
    <label class="col-2 font-weight-bold">Car ID</label>
    <div class="col">
        <RadzenTextBox Placeholder="Car ID..." Change=@(args => UpdateId(args)) />
    </div>
</div>
<br />
<div class="row">
    <label class="col-2 font-weight-bold">Rent Period</label>
    <div class="col">
        <RadzenDropDown AllowClear="false" TValue="int" Data=_timePeriod Change=@(args => UpdateTimePeriod(args)) />
    </div>
</div>
<br />

<div class="row">
    <RadzenButton style="margin: 0 1rem 1rem 0; width: 100px" IsBusy=@_busy Click=@RentButton Text="Rent" />
    <div class="col">

        <label class="font-weight-light font-italic"> @InputValue</label>

    </div>
</div>
<br />
<br />

<h3>Car Selection</h3>
<br />
@if (_cars == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <RadzenGrid AllowPaging="true"
                AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                PageSize="5"
                AllowSorting="true"
                Data="@_cars"
                TItem="Car"
                ColumnWidth="150px">

        <Columns>
            <RadzenGridColumn TItem="Car" Property="Id" Title="Car ID"></RadzenGridColumn>
            <RadzenGridColumn TItem="Car" Property="Name" Title="Car Name"></RadzenGridColumn>
            <RadzenGridColumn TItem="Car" Property="Make" Title="Car Make"></RadzenGridColumn>
            <RadzenGridColumn TItem="Car" Property="Model" Title="Car Model"></RadzenGridColumn>
            <RadzenGridColumn TItem="Car" Property="Status" Title="Car Status"></RadzenGridColumn>
            <RadzenGridColumn TItem="Car" Property="Price" Title="Car Price" FormatString={0:C2}></RadzenGridColumn>
            <RadzenGridColumn TItem="Car" Property="Stock" Title="Car Stock"></RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code {

    private string InputValue { get; set; }
    private List<int> _timePeriod;
    private ICollection<Car> _cars;
    private bool _busy;
    private int RentPeriod { get; set; } = 0;
    private int Id { get; set; } = 0;
    private static CarRentalAPIClient _client;

    public async Task UpdateTimePeriod(object value)
    {
        RentPeriod = (int)value;
        InputValue = "";
    }

    public async Task UpdateId(object value)
    {
        Id = int.Parse(value.ToString());
        InputValue = "";
    }

    public async Task RentButton()
    {
        _busy = true;
        await Task.Delay(1000);
        _busy = false;
        await RentCar(Id, RentPeriod);
    }

    protected override async Task OnInitializedAsync()
    {
        _timePeriod = new List<int>(new[] { 2, 3, 4, 5, 6, 7, 8, 9, 10 });
        CreateClient();
        await UpdateDataGrid();
    }

    public async Task UpdateDataGrid()
    {
        _cars = await _client.CarAsync();
    }

    public async Task RentCar(int id, int rentPeriod)
    {
        InputValue = await _client.RentAsync(id, rentPeriod);
        await UpdateDataGrid();
    }

    private void CreateClient()
    {
        _http = new HttpClient();
        _http.DefaultRequestHeaders.Add("ApiKey", "sdf324SdGgD4324rGdfHG3FDghF45TgD2hgDRGdr");
        //return new("https://localhost:44319/", _http);
        _client = new CarRentalAPIClient("https://localhost:44319/", _http);
    }
}